"""
app.py
-------
FastAPI-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –ª–æ–≥–∏–∫–æ–π:
 1. TRIAGE  ‚Äî –¥–∞/–Ω–µ—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–æ–¥–∞
 2. DEEP    ‚Äî –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è ¬´–¥–∞¬ª
"""

import json, yaml, asyncio, logging
from typing import List
from fastapi import FastAPI
from fastapi.responses import JSONResponse

from models import AnalyzeRequest, AnalyzeResponse, ErrorOut, Finding, TokenStat  ### üîß
from llm import ask_llm, LLMError
import utils                                          # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ

# ---- –ì—Ä—É–∑–∏–º YAML ----
with open("errors.yaml", encoding="utf-8") as f:
    RULES = {r["code"]: r for r in yaml.safe_load(f)}

app = FastAPI(title="TZ-Expert LLM API", version="0.3")

# ---------- PROMPT-–ì–ï–ù–ï–†–ê–¢–û–†–´ ----------
def triage_prompt(html: str, detector: str) -> List[dict]:
    """–ü—Ä–æ–º–ø—Ç ‚Üí {"exists": true/false}"""
    return [
        {"role": "system",
         "content": '–û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û JSON –≤–∏–¥–∞ {"exists":true/false}.'},
        {"role": "user", "content": f"<document>\n{html}\n</document>"},
        {"role": "user", "content": detector}
    ]

def deep_prompt(html: str, rule: dict) -> List[dict]:
    """
    –ü—Ä–æ—Å–∏–º —Å—Ç—Ä–æ–≥–∏–π JSON:
    {
      "code":"E05","title":"‚Ä¶","kind":"Invalid",
      "findings":[
        {"paragraph":"id","quote":"—Ü–∏—Ç–∞—Ç–∞","advice":"‚Ä¶"}
      ]
    }
    """
    schema = (
        '{"code":"%(code)s","title":"%(title)s","kind":"%(kind)s",'
        '"findings":[{"paragraph":"","quote":"","advice":""}]}' % rule
    )
    return [
        {"role": "system",
         "content": "–û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û JSON –ø–æ –æ–±—Ä–∞–∑—Ü—É: " + schema},
        {"role": "user", "content": f"<document>\n{html}\n</document>"},
        {"role": "user", "content": rule["detector"]}
    ]

# ---------- –≠–ù–î-–ü–û–ò–ù–¢–´ ----------
@app.get("/errors")
async def list_rules():
    """–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –ø—Ä–∞–≤–∏–ª (–∫–∞–∫ –µ—Å—Ç—å)."""
    return JSONResponse(RULES)

@app.post("/analyze", response_model=AnalyzeResponse)
async def analyze(req: AnalyzeRequest):
    codes = req.codes or list(RULES.keys())

    # --- —Å—á—ë—Ç—á–∏–∫ —Ç–æ–∫–µ–Ω–æ–≤ -------------------------------------------------  ### üîß
    tokens = {"prompt": 0, "completion": 0}

    # TRIAGE
    async def triage(code: str):
        rule = RULES[code]
        try:
            raw, usage = await ask_llm(triage_prompt(req.html, rule["detector"]))  ### üîß
            tokens["prompt"]     += usage.get("prompt_tokens", 0)                  ### üîß
            tokens["completion"] += usage.get("completion_tokens", 0) 
            return code, json.loads(raw)["exists"]
        except Exception:
            return code, False

    triage_pairs = await asyncio.gather(*[triage(c) for c in codes])
    positives = [c for c, ok in triage_pairs if ok]

    # DEEP
    async def deep(code: str):
        rule = RULES[code]
        try:
            raw, usage = await ask_llm(deep_prompt(req.html, rule))     ### üîß
            tokens["prompt"]     += usage.get("prompt_tokens", 0)       ### üîß
            tokens["completion"] += usage.get("completion_tokens", 0)   ### üîß
            data = json.loads(raw)                       # dict –æ—Ç LLM
            # –º–∞–ø–ø–∏–Ω–≥ ‚Üí Pydantic
            findings = [Finding(**f) for f in data["findings"]]
            return ErrorOut(code=rule["code"],
                            title=rule["title"],
                            kind=rule["kind"],
                            findings=findings)
        except (LLMError, json.JSONDecodeError) as exc:
            # –±—ç–∫–∞–ø-–≤–∞—Ä–∏–∞–Ω—Ç: –≤—ã–≤–æ–¥–∏–º –æ—à–∏–±–∫—É –≤–Ω—É—Ç—Ä—å advice
            return ErrorOut(code=rule["code"], title=rule["title"],
                            kind=rule["kind"],
                            findings=[Finding(paragraph="?",
                                              quote="-",
                                              advice=str(exc))])

    detailed = await asyncio.gather(*[deep(c) for c in positives])

     # —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞—Å—á—ë—Ç ----------------------------------------------------  ### üîß
    tokens["total"] = tokens["prompt"] + tokens["completion"]

    logging.info("tokens_in=%s", utils.count_tokens(req.html) * len(codes))
    return AnalyzeResponse(errors=detailed, tokens=TokenStat(**tokens))
