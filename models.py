"""
models.py
----------
Pydantic-DTO: —Å—Ç—Ä–æ–≥–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–∞/–≤—ã—Ö–æ–¥–∞.
"""

from typing import List
from pydantic import BaseModel, Field

# ---------- –í–•–û–î ----------
class AnalyzeRequest(BaseModel):
    html: str = Field(..., description="–î–æ–∫—É–º–µ–Ω—Ç –≤ HTML")
    codes: List[str] | None = Field(
        None, description="–°–ø–∏—Å–æ–∫ –∫–æ–¥–æ–≤; None ‚Äî –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ"
    )

# ---------- –í–´–•–û–î ----------
class Finding(BaseModel):
    kind: str                   # "Invalid" | "Missing"
    paragraph: str               # "<p01>" | "<p00>"
    quote: str                  # —Ü–∏—Ç–∞—Ç–∞ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    advice: str                 # –ø–æ—è—Å–Ω–µ–Ω–∏–µ / —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è LLM
    
    class Config:
        extra = "ignore"
       

class AnalyzeOut(BaseModel):
    code: str
    title: str                # Invalid | Bows
    findings: List[Finding]  = Field(default_factory=list)  # –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –¥–æ–ø—É—Å—Ç–∏–º   

# + –Ω–æ–≤–æ–µ
class TokenStat(BaseModel):
    prompt: int
    completion: int
    total: int

class AnalyzeResponse(BaseModel):
    errors: List[AnalyzeOut]
    tokens: TokenStat          # üëà –¥–æ–±–∞–≤–∏–ª–∏

